#!/usr/bin/env python3
"""
Mock AI JSON Operator for testing purposes
"""
import argparse
import os
import sys
from pathlib import Path

def main():
    parser = argparse.ArgumentParser(description='Mock AI JSON Operator')
    parser.add_argument('ops', help='Operations to include')
    parser.add_argument('--convert-to-onnx', action='store_true', help='Convert to ONNX')
    parser.add_argument('--max-retries', type=int, default=3, help='Max retries')
    parser.add_argument('-o', '--output', default='outputs', help='Output directory')
    
    args = parser.parse_args()
    
    # Create output directory
    output_dir = Path(args.output)
    output_dir.mkdir(parents=True, exist_ok=True)
    
    # Create a mock subdirectory with dynamic name
    ops_name = args.ops.replace(' ', '_').replace(',', '')
    mock_subdir = output_dir / f"{ops_name}_testcase_12345" / "resources"
    mock_subdir.mkdir(parents=True, exist_ok=True)
    
    # Create a mock ONNX file
    onnx_file = mock_subdir / f"{ops_name}_testcase_12345.onnx"
    with open(onnx_file, 'w') as f:
        f.write(f"Mock ONNX model for operations: {args.ops}\n")
        f.write("This is a test file generated by mock ai-json-operator\n")
    
    print(f"Mock AI JSON Operator successfully generated ONNX model")
    print(f"Operations: {args.ops}")
    print(f"Output file: {onnx_file}")
    print(f"Convert to ONNX: {args.convert_to_onnx}")
    print(f"Max retries: {args.max_retries}")
    
    return 0

if __name__ == '__main__':
    sys.exit(main())